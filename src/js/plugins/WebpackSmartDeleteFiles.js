// File: ./src/js/plugins/WebpackSmartDeleteFiles.js
const fs = require('fs');
const chalk = require('chalk');
const path = require('path');

class WebpackSmartDeleteFiles {
  /**
   * 插件配置
   * @param  {Object} options 插件配置对象
   * @param  {String} options.delPath 要删除的目录路径
   */
  constructor(options) {
    this.validateOptions(options);
    this.options = options;
  }

  validateOptions(options) {
    if (!options || !options.outputPath) {
      const msg = `Please specify an outputPath.`;
      throw new Error(console.log(chalk.bold.bgRed('Error:'), chalk.bold.red(msg)));
    }
  }

  // apply(compiler) {
  //   const { outputPath, fileName = 'manifesto.json' } = this.options;
  //   compiler.hooks.done.tap('WebpackSmartDeleteFiles', (stats) => {
  //     // console.log(this.options.message || 'Hello World!');
  //     const assetsManifest = [];
  //     const { assets } = stats.compilation;
  //     const statsJSON = stats.toJson()

  //     console.log(JSON.stringify(assets))

  //     Object.keys(assets).map(name => {
  //       // let size = assets[name]['_cachedSize'] / 1000;
  //       // console.log(name, assets[name])
  //       // if (!isNaN(size)) {
  //       //   size = Math.round(size) + ' KB';
  //       //   assetsManifest.push({ name, size });
  //       // }
  //       // assetsManifest.push({ name, size });
  //       assetsManifest.push({ name, size:0 });
  //     });

  //     try {
  //       let filePath = outputPath + '/' + fileName;

  //       fs.writeFileSync(filePath, JSON.stringify(assetsManifest, null, 4));

  //       console.log(chalk.green.bold('Manifest generated'));

  //       fs.writeFileSync(path.join(__dirname, '../../../stats.json'), JSON.stringify(statsJSON))
  //     } catch (error) {
  //       console.log(chalk.bold.bgRed('Exception:'), chalk.bold.red(error.message));
  //     }
  //   });
  // }

  apply(compiler) {
    const { outputPath, fileName = 'manifesto.json' } = this.options;
    compiler.hooks.done.tap('WebpackSmartDeleteFiles', (stats) => {
      const json = stats.toJson()

    });
  }


  // apply(compiler) {
  //   // emit 是异步 hook，使用 tapAsync 触及它，还可以使用 tapPromise/tap(同步)
  //   compiler.hooks.emit.tapAsync('FileListPlugin', (compilation, callback) => {
  //     // 在生成文件中，创建一个头部字符串：
  //     var filelist = 'In this build:\n\n';

  //     // 遍历所有编译过的资源文件，
  //     // 对于每个文件名称，都添加一行内容。
  //     for (var filename in compilation.assets) {
  //       filelist += '- ' + filename + '\n';
  //     }

  //     // 将这个列表作为一个新的文件资源，插入到 webpack 构建中：
  //     compilation.assets['filelist.md'] = {
  //       source: function() {
  //         return filelist;
  //       },
  //       size: function() {
  //         return filelist.length;
  //       }
  //     };

  //     callback();
  //   });
  // }

  // apply(compiler) {
  //   compiler.hooks.emit.tapAsync('MyPlugin', (compilation, callback) => {

  //     // fs.writeFileSync(path.join(__dirname, '../../../compilation.json'), toJson(compilation, null, 4));

  //     let compilationContent = ''
  //     // 检索每个（构建输出的）chunk：
  //     compilation.chunks.forEach(chunk => {
  //       // compilationContent += '---------------chunk--------------------';
  //       // compilationContent += JSON.stringify(chunk, null, 4);
  //       console.log('---------------chunk--------------------')
  //       console.log(chunk)
  //       // 检索 chunk 中（内置输入的）的每个模块：
  //       chunk._modules.forEach(module => {
  //         // console.log('--------------module------------------------')
  //         // console.log(module);
  //         // compilationContent += '--------------module------------------------';
  //         // compilationContent += JSON.stringify(module, null, 4);
  //         // 检索模块中包含的每个源文件路径：
  //         module.dependencies.forEach(filepath => {
  //           // 我们现在已经对源结构有不少了解……
  //           // console.log('----------------filePath--------------------------')
  //           // console.log(filepath)
  //           // compilationContent += '----------------filePath--------------------------';
  //           // compilationContent += JSON.stringify(filepath, null, 4);
  //         });
  //       });

  //       // console.log('-------------source-----------------')
  //       // // 检索由 chunk 生成的每个资源(asset)文件名：
  //       // chunk.files.forEach(filename => {
  //       //   // Get the asset source for each file generated by the chunk:
  //       //   var source = compilation.assets[filename].source();
  //       //   console.log(source)
  //       // });
  //     });
  //     // fs.writeFileSync(path.join(__dirname, '../../../compilation.json'), compilationContent);

  //     callback();
  //   });
  // }
}

// toJson
// fix Converting circular structure to JSON
function toJson (value, replacer, space) {
  // 声明cache变量，便于匹配是否有循环引用的情况
  var cache = [];
  var str = JSON.stringify(value, function(key, value) {
      if (typeof value === 'object' && value !== null) {
          // console.log(key, value)
          if (cache.indexOf(value) !== -1) {
              // 移除
              return;
          }
          // 收集所有的值
          cache.push(value);
      }
      return value;
  }, space);
  cache = null; // 清空变量，便于垃圾回收机制回收
  return str;
}

module.exports = WebpackSmartDeleteFiles;
